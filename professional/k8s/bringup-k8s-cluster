#!/bin/bash -e

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")
source ${SCRIPTPATH}/common

echo "## Create the ${NETWORK} custom VPC network"
gcloud compute networks create ${NETWORK} --subnet-mode custom

echo "## Create the kubernetes subnet in the ${NETWORK} VPC network"
gcloud compute networks subnets create kubernetes \
  --network ${NETWORK} \
  --range 10.240.0.0/24
  
echo "## Create a firewall rule that allows internal communication across all protocols"
gcloud compute firewall-rules create ${NETWORK}-allow-internal \
  --allow tcp,udp,icmp \
  --network ${NETWORK} \
  --source-ranges 10.240.0.0/24,10.200.0.0/16
  
echo "## Create a firewall rule that allows external SSH, ICMP, and HTTPS"
gcloud compute firewall-rules create ${NETWORK}-allow-external \
  --allow tcp:22,tcp:6443,icmp \
  --network ${NETWORK} \
  --source-ranges 0.0.0.0/0
  
echo "## List the firewall rules in the ${NETWORK} VPC network"
gcloud compute firewall-rules list --filter="network:${NETWORK}"

echo "## Allocate a static IP address that will be attached to the external load balancer fronting the Kubernetes API Servers"
gcloud compute addresses create ${NETWORK} \
  --region $(gcloud config get-value compute/region)

pause 10

echo "## Verify the ${NETWORK} static IP address was created in your default compute region"
gcloud compute addresses list --filter="name=('${NETWORK}')"

echo "## Create three compute instances which will host the Kubernetes control plane"
for i in 0 1; do
  gcloud compute instances create controller-${i} \
    --async \
    --boot-disk-size 200GB \
    --can-ip-forward \
    --image-family ubuntu-1804-lts \
    --image-project ubuntu-os-cloud \
    --machine-type n1-standard-2 \
    --private-network-ip 10.240.0.1${i} \
    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \
    --subnet kubernetes \
    --tags ${NETWORK},controller
done

pause 5

echo "## Create three compute instances which will host the Kubernetes worker nodes"
for i in 0 1; do
  gcloud compute instances create worker-${i} \
    --async \
    --boot-disk-size 200GB \
    --can-ip-forward \
    --image-family ubuntu-1804-lts \
    --image-project ubuntu-os-cloud \
    --machine-type n1-standard-2 \
    --metadata pod-cidr=10.200.${i}.0/24 \
    --private-network-ip 10.240.0.2${i} \
    --scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \
    --subnet kubernetes \
    --tags ${NETWORK},worker
done

pause 5

echo "## Create the external load balancer network resources"
KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe ${NETWORK} \
  --region $(gcloud config get-value compute/region) \
  --format 'value(address)')

gcloud compute http-health-checks create kubernetes \
  --description "Kubernetes Health Check" \
  --host "kubernetes.default.svc.cluster.local" \
  --request-path "/healthz"

gcloud compute firewall-rules create ${NETWORK}-allow-health-check \
  --network ${NETWORK} \
  --source-ranges 209.85.152.0/22,209.85.204.0/22,35.191.0.0/16 \
  --allow tcp

gcloud compute target-pools create kubernetes-target-pool \
  --http-health-check kubernetes

#will add controller-1 instance after k8s setup done
gcloud compute target-pools add-instances kubernetes-target-pool \
  --instances controller-0

gcloud compute forwarding-rules create kubernetes-forwarding-rule \
  --address ${KUBERNETES_PUBLIC_ADDRESS} \
  --ports 6443 \
  --region $(gcloud config get-value compute/region) \
  --target-pool kubernetes-target-pool

gcloud compute target-pools create worker-target-pool

gcloud compute target-pools add-instances worker-target-pool \
   --instances worker-0,worker-1
